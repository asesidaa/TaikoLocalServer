// <auto-generated />
using System;
using GameDatabase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameDatabase.Migrations
{
    [DbContext(typeof(TaikoDbContext))]
    [Migration("20240915182025_Add ChallengeCompetition")]
    partial class AddChallengeCompetition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("GameDatabase.Entities.AiScoreDatum", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Baid", "SongId", "Difficulty");

                    b.ToTable("AiScoreData");
                });

            modelBuilder.Entity("GameDatabase.Entities.AiSectionScoreDatum", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Crown")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DrumrollCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GoodCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MissCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OkCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Baid", "SongId", "Difficulty", "SectionIndex");

                    b.ToTable("AiSectionScoreData");
                });

            modelBuilder.Entity("GameDatabase.Entities.Card", b =>
                {
                    b.Property<string>("AccessCode")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccessCode");

                    b.HasIndex("Baid");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteBestDatum", b =>
                {
                    b.Property<uint>("CompId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ComboCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Crown")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DrumrollCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GoodCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HitCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MissCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OkCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ScoreRank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ScoreRate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Skipped")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompId", "Baid", "SongId");

                    b.HasIndex("Baid");

                    b.HasIndex("CompId", "SongId");

                    b.ToTable("ChallengeCompeteBestData");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteDatum", b =>
                {
                    b.Property<uint>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompeteDescribe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("CompeteMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompeteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("CompeteTarget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime");

                    b.Property<uint>("MaxParticipant")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OnlyPlayOnce")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RequireTitle")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Share")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompId");

                    b.HasIndex("Baid")
                        .IsUnique();

                    b.ToTable("ChallengeCompeteData");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteParticipantDatum", b =>
                {
                    b.Property<uint>("CompId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompId", "Baid");

                    b.HasIndex("Baid");

                    b.ToTable("ChallengeCompeteParticipantData");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteSongDatum", b =>
                {
                    b.Property<uint>("CompId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsInverseOn")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsVanishOn")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RandomType")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompId", "SongId");

                    b.ToTable("ChallengeCompeteSongData");
                });

            modelBuilder.Entity("GameDatabase.Entities.Credential", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Baid");

                    b.ToTable("Credential", (string)null);
                });

            modelBuilder.Entity("GameDatabase.Entities.DanScoreDatum", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<uint>("ArrivalSongCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClearState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0u);

                    b.Property<uint>("ComboCountTotal")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SoulGaugeTotal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Baid", "DanId", "DanType");

                    b.ToTable("DanScoreData");
                });

            modelBuilder.Entity("GameDatabase.Entities.DanStageScoreDatum", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<uint>("SongNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BadCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ComboCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DrumrollCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GoodCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HighScore")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OkCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlayScore")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalHitCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Baid", "DanId", "DanType", "SongNumber");

                    b.ToTable("DanStageScoreData");
                });

            modelBuilder.Entity("GameDatabase.Entities.SongBestDatum", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BestCrown")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BestRate")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BestScore")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BestScoreRank")
                        .HasColumnType("INTEGER");

                    b.HasKey("Baid", "SongId", "Difficulty");

                    b.ToTable("SongBestData");
                });

            modelBuilder.Entity("GameDatabase.Entities.SongPlayDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ComboCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Crown")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DrumrollCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GoodCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HitCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MissCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OkCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlayTime")
                        .HasColumnType("datetime");

                    b.Property<uint>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ScoreRank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ScoreRate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Skipped")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SongNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Baid");

                    b.ToTable("SongPlayData");
                });

            modelBuilder.Entity("GameDatabase.Entities.Token", b =>
                {
                    b.Property<uint>("Baid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.HasKey("Baid", "Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("GameDatabase.Entities.UserDatum", b =>
                {
                    b.Property<uint>("Baid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AchievementDisplayDifficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AiWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ColorBody")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ColorFace")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ColorLimb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostumeData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CostumeFlgArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("CurrentBody")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrentFace")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrentHead")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrentKigurumi")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrentPuchi")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DifficultyPlayedArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DifficultyPlayedCourse")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DifficultyPlayedSort")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DifficultyPlayedStar")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DifficultySettingArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DifficultySettingCourse")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DifficultySettingSort")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DifficultySettingStar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisplayAchievement")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisplayDan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FavoriteSongsArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericInfoFlgArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSkipOn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoiceOn")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastPlayDatetime")
                        .HasColumnType("datetime");

                    b.Property<uint>("LastPlayMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MyDonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("MyDonNameLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotesPosition")
                        .HasColumnType("INTEGER");

                    b.Property<short>("OptionSetting")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SelectedToneId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleFlgArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TitlePlateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToneFlgArray")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedFace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedHead")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedKigurumi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedPuchi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedSongIdList")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Baid");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("GameDatabase.Entities.AiScoreDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Ba")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ba");
                });

            modelBuilder.Entity("GameDatabase.Entities.AiSectionScoreDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.AiScoreDatum", "Parent")
                        .WithMany("AiSectionScoreData")
                        .HasForeignKey("Baid", "SongId", "Difficulty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GameDatabase.Entities.Card", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Ba")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ba");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteBestDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "UserData")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDatabase.Entities.ChallengeCompeteSongDatum", "ChallengeCompeteSongData")
                        .WithMany("BestScores")
                        .HasForeignKey("CompId", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeCompeteSongData");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Holder")
                        .WithOne()
                        .HasForeignKey("GameDatabase.Entities.ChallengeCompeteDatum", "Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteParticipantDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "UserData")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDatabase.Entities.ChallengeCompeteDatum", "ChallengeCompeteData")
                        .WithMany("Participants")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeCompeteData");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteSongDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.ChallengeCompeteDatum", "ChallengeCompeteData")
                        .WithMany("Songs")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeCompeteData");
                });

            modelBuilder.Entity("GameDatabase.Entities.Credential", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Ba")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ba");
                });

            modelBuilder.Entity("GameDatabase.Entities.DanScoreDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Ba")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ba");
                });

            modelBuilder.Entity("GameDatabase.Entities.DanStageScoreDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.DanScoreDatum", "Parent")
                        .WithMany("DanStageScoreData")
                        .HasForeignKey("Baid", "DanId", "DanType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GameDatabase.Entities.SongBestDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Ba")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ba");
                });

            modelBuilder.Entity("GameDatabase.Entities.SongPlayDatum", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Ba")
                        .WithMany()
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ba");
                });

            modelBuilder.Entity("GameDatabase.Entities.Token", b =>
                {
                    b.HasOne("GameDatabase.Entities.UserDatum", "Datum")
                        .WithMany("Tokens")
                        .HasForeignKey("Baid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datum");
                });

            modelBuilder.Entity("GameDatabase.Entities.AiScoreDatum", b =>
                {
                    b.Navigation("AiSectionScoreData");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteDatum", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("GameDatabase.Entities.ChallengeCompeteSongDatum", b =>
                {
                    b.Navigation("BestScores");
                });

            modelBuilder.Entity("GameDatabase.Entities.DanScoreDatum", b =>
                {
                    b.Navigation("DanStageScoreData");
                });

            modelBuilder.Entity("GameDatabase.Entities.UserDatum", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
