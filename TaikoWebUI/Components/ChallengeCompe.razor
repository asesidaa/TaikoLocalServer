@inject IDialogService DialogService;
@inject HttpClient Client

@if (ChallengeCompetition != null)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                @if (ChallengeCompetition.CompeteMode == CompeteModeType.Chanllenge)
                {
                    @if (ChallengeCompetition?.Baid != Baid)
                    {
                        <MudText Typo="Typo.h6" Style="font-weight:bold;word-break:break-all">@Localizer["From"] @ChallengeCompetition?.Holder?.MyDonName</MudText>
                    }
                    else
                    {
                        var participant = ChallengeCompetition?.Participants?.Find(p => p.Baid != Baid);
                        <MudText Typo="Typo.h6" Style="font-weight:bold;word-break:break-all">@Localizer["To"] @participant?.UserInfo?.MyDonName</MudText>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6" Style="font-weight:bold;word-break:break-all">@ChallengeCompetition?.CompeteName</MudText>
                }
                
                <MudText Typo="Typo.caption" Style="display: block">@Localizer["Comp ID"]:@ChallengeCompetition?.CompId</MudText>
                <MudText Typo="Typo.caption" Style="display: block">@Localizer["Describe"]:@ChallengeCompetition?.CompeteDescribe</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @if (false && ChallengeCompetition?.Baid == Baid || Baid == 0)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                }
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            
            @{
                foreach (var song in ChallengeCompetition.Songs)
                {
                    <div>
                        <MudButton Variant="Variant.Text" StartIcon=@Icons.Material.Filled.Audiotrack>@song.MusicDetail?.SongName</MudButton>
                    </div>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudStack Row="true" Style="width:100%" Spacing="4" Justify="Justify.FlexEnd">
                <MudButton Disabled=@CanParticipateChallengeCompetition()
                           OnClick=@(_ => AnswerChallenge(true))>@Localizer["Information"]</MudButton>
                @if (ChallengeCompetition.CompeteMode == CompeteModeType.Chanllenge)
                {
                    @if (Baid == 0 || ChallengeCompetition?.Baid == Baid || ChallengeCompetition?.State != CompeteState.Waiting)
                    {
                        switch (ChallengeCompetition?.State)
                        {
                            case CompeteState.Waiting:
                                <MudText Typo="Typo.body1" Style="padding: 6px 8px 6px 8px;" Color="Color.Primary">@Localizer["Waiting"]</MudText>
                                break;
                            case CompeteState.Normal:
                                <MudText Typo="Typo.body1" Style="padding: 6px 8px 6px 8px;" Color="Color.Success">@Localizer["Accepted"]</MudText>
                                break;
                            case CompeteState.Rejected:
                                <MudText Typo="Typo.body1" Style="padding: 6px 8px 6px 8px;" Color="Color.Error">@Localizer["Rejected"]</MudText>
                                break;
                        }
                    }
                    else
                    {
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                            <MudButton Disabled="@(Baid == 0 || (ChallengeCompetition?.State == CompeteState.Waiting && ChallengeCompetition?.Baid == Baid))"
                                       OnClick=@(_ => AnswerChallenge(true))>@Localizer["Accept"]</MudButton>
                            <MudButton Disabled="@(Baid == 0 || (ChallengeCompetition?.State == CompeteState.Waiting && ChallengeCompetition?.Baid == Baid))"
                                       OnClick=@(_ => AnswerChallenge(false))>@Localizer["Reject"]</MudButton>
                        </MudButtonGroup>
                    }
                }
                else if (ChallengeCompetition.CompeteMode == CompeteModeType.Compete || ChallengeCompetition.CompeteMode == CompeteModeType.OfficialCompete)
                {
                    if (Baid != 0)
                    {
                        if (ChallengeCompetition.Participants.Any(p => p.Baid == Baid))
                        {
                            <MudText Typo="Typo.body1" Style="padding: 6px 8px 6px 8px;" Color="Color.Success">@Localizer["Participated"]</MudText>
                        }
                        else
                        {
                            if (ChallengeCompetition.MaxParticipant <= ChallengeCompetition.Participants.Count)
                            {
                                <MudText Typo="Typo.body1" Style="padding: 6px 8px 6px 8px;" Color="Color.Warning">@Localizer["Fullfilled"]</MudText>
                            }
                            else
                            {
                                <MudButton OnClick="AnswerCompete">@Localizer["Participate"]</MudButton>
                            }
                        }
                    }
                }
            </MudStack>
        </MudCardActions>
    </MudCard>
}

@code {
    [Parameter] public ChallengeCompetition? ChallengeCompetition { get; set; }
    [Parameter] public int Baid { get; set; }
    [Parameter] public EventCallback<ChallengeCompetition> Refresh { get; set; }

    private bool SelfHoldedChallengeCompetiton()
    {
        return ChallengeCompetition?.Baid == Baid || Baid == 0;
    }

    private bool ChallengeNeedAnswer()
    {
        return Baid != 0 && ChallengeCompetition?.State == CompeteState.Waiting && ChallengeCompetition?.Baid != Baid;
    }

    private bool ParticipatedChallengeCompetition()
    {
        return ChallengeCompetition?.Participants?.Find(p => p.Baid == Baid) != null;
    }

    private bool CanParticipateChallengeCompetition()
    {
        return ChallengeCompetition?.CreateTime < DateTime.Now && DateTime.Now < ChallengeCompetition?.ExpireTime && !ParticipatedChallengeCompetition();
    }

    private async Task AnswerChallenge(bool accept)
    {
        if (ChallengeCompetition == null || ChallengeCompetition.State != CompeteState.Waiting) return;
        var url = accept ? $"api/ChallengeCompeteManage/{Baid}/acceptChallenge/{ChallengeCompetition.CompId}" : $"api/ChallengeCompeteManage/{Baid}/rejectChallenge/{ChallengeCompetition.CompId}";
        var response = await Client.GetAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            await DialogService.ShowMessageBox(
                Localizer["Error"],
                Localizer["Request Error"],
                Localizer["Dialog OK"], null, null, new DialogOptions { DisableBackdropClick = true });
            return;
        }
        await Refresh.InvokeAsync(ChallengeCompetition);

        ChallengeCompetition.State = accept ? CompeteState.Normal : CompeteState.Rejected;
    }

    private async Task AnswerCompete()
    {
        if (ChallengeCompetition == null) return;
        var response = await Client.GetAsync($"api/ChallengeCompeteManage/{Baid}/joinCompete/{ChallengeCompetition.CompId}");
        if (!response.IsSuccessStatusCode)
        {
            await DialogService.ShowMessageBox(
                Localizer["Error"],
                Localizer["Request Error"],
                Localizer["Dialog OK"], null, null, new DialogOptions { DisableBackdropClick = true });
            return;
        }
        await Refresh.InvokeAsync(ChallengeCompetition);
    }
}
