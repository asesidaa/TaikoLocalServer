@inject HttpClient Client
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject BreadcrumbsStateContainer BreadcrumbsStateContainer
@inject IDialogService DialogService;

@using TaikoWebUI.Components;
@using TaikoWebUI.Pages.Dialogs

<MudGrid Class="my-8">
    @if (!AuthService.LoginRequired || (AuthService.LoginRequired && AuthService.IsAdmin))
    {
        <MudItem xs="12">
            <div class="d-flex justify-content-end gap-2">
                <MudStack StretchItems="StretchItems.Start" Row="true" Style="width: 100%">
                    <MudInput @bind-Value="searchTerm"
                              TextChanged="(async term => { isLoading = true; await OnSearch(term); })"
                              Immediate="true"
                              FullWidth="true"
                              Clearable="true"
                              Margin="Margin.Dense"
                              Label="@Localizer["Search"]"
                              Placeholder="@Localizer["Search by Name, Comp ID"]"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" Style="width: 100%"/>
                    @if (Mode == 1) {
                        <MudButton Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Disabled="@(Baid==0)" OnClick=@(_ => OpenDialogAsync(1, 1)) Style="width: 80px">@Localizer["Add"]</MudButton>
                    }
                    else if (Mode == 2)
                    {
                        <MudButton Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Disabled="@(Baid==0)" OnClick=@(_ => OpenDialogAsync(2, 3)) Style="width: 80px">@Localizer["Add"]</MudButton>
                    }
                    else if (Mode == 3)
                    {
                        <MudButton Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Disabled="@(Baid!=0)" OnClick=@(_ => OpenDialogAsync(3, 3)) Style="width: 80px">@Localizer["Add"]</MudButton>
                    }
                </MudStack>
            </div>
        </MudItem>
        @if (isLoading || response == null)
        {
            // Loading...
            for (uint i = 0; i < pageSize; i++)
            {
                <MudItem xs="12" md="6" lg="4" xl="3">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudSkeleton Width="30%" Height="42px;" Class="mb-5" />
                            <MudSkeleton Width="80%" />
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudStack Row="true" Style="width:100%" Spacing="4" Justify="Justify.FlexEnd">
                                <MudSkeleton Width="64px" Height="40px" />
                                <MudSkeleton Width="64px" Height="40px" />
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else if (response.List.Count > 0)
        {
            foreach (var challengeCompetition in response.List)
            {
                <MudItem xs="12" md="6" lg="4" xl="3">
                    <ChallengeCompe ChallengeCompetition="challengeCompetition" Baid="(uint)Baid" />
                </MudItem>
            }
        }
        else
        { // No users in the database
            <MudItem xs="12">
                <MudText Align="Align.Center" Class="my-8">
                    @Localizer["No Data"]
                </MudText>
            </MudItem>
        }
    }
    else if (AuthService.LoginRequired && !AuthService.IsLoggedIn)
    {
        // Not logged in, redirect
        NavigationManager.NavigateTo("/Login");
    }
    else
    {
        NavigationManager.NavigateTo("/");
    }

    @if (response != null && TotalPages > 1)
    {
        <MudItem xs="12">
            <div class="d-flex flex-column align-center">
                <MudPagination Class="pa-4" Rectangular="true" DisableElevation="true" Count="@TotalPages" Selected="currentPage" SelectedChanged="(page) => OnPageChange(page)" BoundaryCount="1" MiddleCount="3" />
            </div>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public int Baid { get; set; }

    [Parameter]
    public int Mode { get; set; }



    private ChallengeCompetitionResponse? response = new();
    private CancellationTokenSource? cts;
    private int TotalPages { get; set; } = 0;
    private bool isLoading = true;
    private int currentPage = 1;
    private readonly int pageSize = 12;
    private string? searchTerm = null;
    private bool inProgress = false;

    private async Task GetUsersData()
    {
        isLoading = true;

        response = await Client.GetFromJsonAsync<ChallengeCompetitionResponse>($"api/ChallengeCompeteManage/queryPage?mode={(uint)Mode}&baid={Baid}&inProgress={(inProgress ? 1 : 0)}&page={currentPage}&limit={pageSize}&searchTerm={searchTerm}");
        response.ThrowIfNull();

        TotalPages = response.TotalPages;
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (AuthService.LoginRequired && !AuthService.IsLoggedIn)
        {
            await AuthService.LoginWithAuthToken();
        }

        if (AuthService.IsAdmin || !AuthService.LoginRequired)
        {
            await GetUsersData();
        }

        BreadcrumbsStateContainer.breadcrumbs.Clear();
        BreadcrumbsStateContainer.breadcrumbs.Add(new BreadcrumbItem(Localizer["Users"], href: "/Users"));
        BreadcrumbsStateContainer.NotifyStateChanged();
    }

    private async Task OnPageChange(int page)
    {
        currentPage = page;
        await GetUsersData();
    }

    private async Task Debounce(Func<Task> action, int delayInMilliseconds)
    {
        // Cancel the previous task
        cts?.Cancel();

        // Create a new CancellationTokenSource
        cts = new CancellationTokenSource();

        try
        {
            // Wait for the delay
            await Task.Delay(delayInMilliseconds, cts.Token);

            // Execute the action
            await action();
        }
        catch (TaskCanceledException)
        {
            // Ignore the exception
        }
    }

    private async Task OnSearch(string search)
    {
        searchTerm = search;
        currentPage = 1;

        // Debounce the GetUsersData method
        await Debounce(GetUsersData, 500); // 500 milliseconds delay
    }

    private Task OpenDialogAsync(int mode, int maxSongs)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("Mode", mode);
        parameters.Add("MaxSongs", maxSongs);

        return DialogService.ShowAsync<AddChallengeCompetitionDialog>(Localizer["Create"], parameters, options);
    }
}
